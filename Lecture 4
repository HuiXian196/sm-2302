% Lecture 4

%% Ex 1

rng(4);                 % For producibility
N = 1000;               % Number of steps
pos = zeros(1, N+1);    % Initialise positions over time

for k = 2:N+1
     % Generate a random step: -1 if rand < 0.5, else +1
     if rand < 0.5
         pos(k) = pos(k - 1) - 1;
     else
         pos(k) = pos(k - 1) + 1;
     end
end

% Histogram of visited positions (50 bins)

figure;
histogram(pos, 50);
xlabel('Positions')
ylabel('Counts');
title('Visited positions');

% Plot the trajectory of the Brownian motion
figure;
plot(0:N, pos, 'LineWidth', 1);
xlabel('Time Steps');
ylabel('Position');
title('10 Random Walk');

%% Ex 2 - Cells

% Create the 2 x 3 cell array

c = {'Spongebob', 'Patrick', 'Squidward';   % Row 1 = names
     'yellow', 'pink', 'green'              % Row 2 = colour
     };

% Random indices in {1, 2, 3}
iName = randi(3);                           % Name index
iCol = randi(3);                            % Colour index

% Access with curly braces to get contents
name = c{1, iName};
colour = c{2, iCol};

%Print string
sentence = name + " is " + colour + "?";
disp(sentence);

%% Ex 3 - Structs - sentGenStruct

% Create the 2 x 3 cell array

c = {'Spongebob', 'Patrick', 'Squidward';   % Row 1 = names
     'yellow', 'pink', 'green'              % Row 2 = colour
     };

% Bonus fields - add age and child age as in the notes
ages = [31, 27, 18];
childAges = {[2; 4], 1, []};

% Construct the struct array
s = struct;
for k = 1:3
    s(k).name = c{1, k};
    s(k).colour = c{2, k};
    s(k).age = ages(k);
    s(k).childAge = childAges{k};
end

% Pick a random stranger to describe
id = randi(3);

% Display statement
fprintf('%s is %s, age is %d. \n', s(id).name, s(id).colour, s(id).age);

% Show child age if any
if ~isempty(s(id).childAge)
    fprintf('Their children are aged: %s \n', mat2str(s(id).childAge));
else
    fprintf('They have no children. \n');
end
