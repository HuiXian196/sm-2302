% Lecture 3

%% Ex 1 -Fitting polynomials
xVal = [-1 0 2];
yVal = [0 -1 3];

A = [xVal(1)^2 xVal(1) 1; xVal(2)^2 xVal(2) 1; xVal(3)^2 xVal(3) 1];

y = yVal'; % Transpose yVal for the linear system / Column vector of y-values
x = A \ y; % Solve for coefficients of the polynomial

% Extract coefficients
a = x(1)
b = x(2)
c = x(3)

%% Pg 11

p2 = polyfit(xVal, yVal, 2);    % Finds the best 2nd order polynomial that fits the points
figure;
plot(xVal, yVal, 'o', 'MarkerSize', 8);
hold on;
x = -3:0.1:3;
plot(x, polyval(p2, x), 'r-');

%% Ex 2 - Polynomial fitting

clear; close all; clc

% Noisy polynomial fit

% Data
x = -4:0.1:4; y = x.^2;
y_noisy = y + randn(size(y));

figure;
plot(x, y_noisy, '.', 'MarkerSize', 8);
hold on;
p2 = polyfit(x, y_noisy, 2);
plot(x, polyval(p2, x), 'r-', 'LineWidth', 2);
title('Noisy Data and Polynomial Fit');
legend('Noisy Data', 'Polynomial Fit');

%% Ex 3 - Minimum finding

clear; close all; clc

% Defining anon function: 
% f = @(x) cos(4*x).*sin(10*x).*exp(-abs(x)); 
f = @myfun;
% In another script: call function f = myfun(x) -> f = cos(4*x).*sin(10*x).*exp(-abs(x)); 
x_min = fminbnd(f, -pi, pi);

figure;
x = linspace(-pi, pi, 500);
plot(x, f(x)) ; hold on;
plot(x_min, f(x_min), 'ro', 'MarkerFaceColor', 'r');
xlabel('x');
ylabel('y');
title('Local minimum of f(x) on [-\pi, \pi]');
