% Lecture 3

%% Ex 1 -Fitting polynomials
xVal = [-1 0 2];
yVal = [0 -1 3];

A = [xVal(1)^2 xVal(1) 1; xVal(2)^2 xVal(2) 1; xVal(3)^2 xVal(3) 1];

y = yVal'; % Transpose yVal for the linear system / Column vector of y-values
x = A \ y; % Solve for coefficients of the polynomial

% Extract coefficients
a = x(1)
b = x(2)
c = x(3)

%% Pg 11

p2 = polyfit(xVal, yVal, 2);    % Finds the best 2nd order polynomial that fits the points
figure;
plot(xVal, yVal, 'o', 'MarkerSize', 8);
hold on;
x = -3:0.1:3;
plot(x, polyval(p2, x), 'r-');

%% Ex 2 - Polynomial fitting

clear; close all; clc

% Noisy polynomial fit

% Data
x = -4:0.1:4; y = x.^2;
y_noisy = y + randn(size(y));

figure;
plot(x, y_noisy, '.', 'MarkerSize', 8);
hold on;
p2 = polyfit(x, y_noisy, 2);
plot(x, polyval(p2, x), 'r-', 'LineWidth', 2);
title('Noisy Data and Polynomial Fit');
legend('Noisy Data', 'Polynomial Fit');

%% Ex 3 - Minimum finding

clear; close all; clc

% Defining anon function: 
% f = @(x) cos(4*x).*sin(10*x).*exp(-abs(x)); 
f = @myfun;
% In another script: call function f = myfun(x) -> f = cos(4*x).*sin(10*x).*exp(-abs(x)); 
x_min = fminbnd(f, -pi, pi);

figure;
x = linspace(-pi, pi, 500);
plot(x, f(x)) ; hold on;
plot(x_min, f(x_min), 'ro', 'MarkerFaceColor', 'r');
xlabel('x');
ylabel('y');
title('Local minimum of f(x) on [-\pi, \pi]');

%% Pg 27 - make a new script

function dydt = chem(t,y)

    dydt = zeros(2,1);             % Initialise dydt = [dA/dt; dB/dt] with y = [A; B]
    dydt(1) = -10*y(1) + 50*y(2);   % dA/dt
    dydt(2) = 10*y(1) - 50*y(2);   % dB/dt

end

%% Script to call and solve this ODE function - in a new script

[t, y] = ode45(@chem, [0 0.5], [0 1]);
% Time interval is from 0 to 0.5
% Initial condition is A = 0, B = 1

plot(t, y(:,1), 'b', t, y(:,2), 'r');    % Alternative to using hold on
legend('A', 'B')

%% Pg 29 - make a new script

function dxdt = pendulum(t, x)

    L = 1;
    theta = x(1); gamma = x(2);

    dtheta = gamma;
    dgamma = -(9.8/L)*sin(theta);
    dxdt = [dtheta; dgamma];

end

%% To call and solve pendulum ODE - in a new script

[t, x] = ode45(@pendulum, [0 10], [0.9*pi 0]);
% Time interval from 0 to 10
% Initial conditions are theta(0) = o.9*pi, gamma(0) = 0

plot(t, x(:,1), 'b', t, x(:,2), 'r')
legend('angular position', 'angular velocity')

%% Ex 4 - ODE

func = @(t, y) -t*y/10;
[t, y] = ode45(func, [0 10], 10);
plot(t, y, 'b*');
hold on;
plot(t, 10*exp(-t.^2/20), 'r--');
legend('Numerical', 'Analytical')
